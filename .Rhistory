dev.off()
}
makePlot1(power)
makePlot2(power)
makePlot1(power)
setwd("~/Documents/R")
makePlot1(power)
makePlot2 <- function(power, myFilename = 'plot2.png') {
plot2(power)
dev.copy(png, file = myFilename, width = 480, height = 480, units = "px")
dev.off()
}
makePlot2(power)
makePlot1 <- function(power, myFilename = 'plot1.png') {
plot1(power)
dev.copy(png, file = myFilename, width = 480, height = 480, units = "px")
dev.off()
}
makePlot1(power)
plot3 <- function(power, bty = 'o') {
with(data, {
plot(x = power$dateTime,
y = power$Sub_metering_1,
type = 'l',
col = 'black',
xlab = '',
ylab = 'Energy sub metering')
lines(x = power$dateTime, y = power$Sub_metering_2, col = 'red')
lines(x = power$dateTime, y = power$Sub_metering_3, col = 'blue')
legend('topright',
col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1,1,1),
bty = bty)
})
}
plot3(power)
plot3(power)
makePlot3 <- function(power, myFilename = 'plot3.png') {
plot3(power)
dev.copy(png, file = myFilename, width = 480, height = 480, units = "px")
dev.off()
}
makePlot3(power)
plot4 <- function(data) {
plot2 <- function(power) {
plot(x = power$dateTime,
y = power$Global_active_power,
type = 'l',
xlab = '',
ylab = 'Global Active Power (kilowatts)',
mgp = c(3,1,0))
}
plot3 <- function(power, bty = 'o') {
with(data, {
plot(x = power$dateTime,
y = power$Sub_metering_1,
type = 'l',
col = 'black',
xlab = '',
ylab = 'Energy sub metering')
lines(x = power$dateTime, y = power$Sub_metering_2, col = 'red')
lines(x = power$dateTime, y = power$Sub_metering_3, col = 'blue')
legend('topright',
col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1,1,1),
bty = bty)
})
}
plotVoltage <- function(power) {
plot(x = power$dateTime,
y = power$Voltage,
type = 'l',
xlab = 'datetime',
ylab = 'Voltage')
}
plotGlobalReactivePower <- function(power) {
plot(x = power$dateTime,
y = power$Global_reactive_power,
type = 'h',
xlab = 'datetime',
ylab = 'Global_reactive_power')
}
par(mfrow = c(2,2))
with(power, {
plot2(power, ylab = 'Global Active Power')
plotVoltage(power)
plot3(power, bty = 'n')
plotGlobalReactivePower(power)
})
}
plot4 <- function(power) {
plot2 <- function(power) {
plot(x = power$dateTime,
y = power$Global_active_power,
type = 'l',
xlab = '',
ylab = 'Global Active Power (kilowatts)',
mgp = c(3,1,0))
}
plot3 <- function(power, bty = 'o') {
with(data, {
plot(x = power$dateTime,
y = power$Sub_metering_1,
type = 'l',
col = 'black',
xlab = '',
ylab = 'Energy sub metering')
lines(x = power$dateTime, y = power$Sub_metering_2, col = 'red')
lines(x = power$dateTime, y = power$Sub_metering_3, col = 'blue')
legend('topright',
col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1,1,1),
bty = bty)
})
}
plotVoltage <- function(power) {
plot(x = power$dateTime,
y = power$Voltage,
type = 'l',
xlab = 'datetime',
ylab = 'Voltage')
}
plotGlobalReactivePower <- function(power) {
plot(x = power$dateTime,
y = power$Global_reactive_power,
type = 'h',
xlab = 'datetime',
ylab = 'Global_reactive_power')
}
par(mfrow = c(2,2))
with(power, {
plot2(power, ylab = 'Global Active Power')
plotVoltage(power)
plot3(power, bty = 'n')
plotGlobalReactivePower(power)
})
}
plot4(power)
plot4 <- function(power) {
plot2 <- function(power) {
plot(x = power$dateTime,
y = power$Global_active_power,
type = 'l',
xlab = '',
ylab = 'Global Active Power (kilowatts)',
mgp = c(3,1,0))
}
plot3 <- function(power, bty = 'o') {
with(data, {
plot(x = power$dateTime,
y = power$Sub_metering_1,
type = 'l',
col = 'black',
xlab = '',
ylab = 'Energy sub metering')
lines(x = power$dateTime, y = power$Sub_metering_2, col = 'red')
lines(x = power$dateTime, y = power$Sub_metering_3, col = 'blue')
legend('topright',
col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1,1,1),
bty = bty)
})
}
plotVoltage <- function(power) {
plot(x = power$dateTime,
y = power$Voltage,
type = 'l',
xlab = 'datetime',
ylab = 'Voltage')
}
plotGlobalReactivePower <- function(power) {
plot(x = power$dateTime,
y = power$Global_reactive_power,
type = 'h',
xlab = 'datetime',
ylab = 'Global_reactive_power')
}
par(mfrow = c(2,2))
with(power, {
plot2(power,)
plotVoltage(power)
plot3(power, bty = 'n')
plotGlobalReactivePower(power)
})
}
plot4(power)
plot4 <- function(power) {
plot2 <- function(power) {
plot(x = power$dateTime,
y = power$Global_active_power,
type = 'l',
xlab = '',
ylab = 'Global Active Power (kilowatts)',
mgp = c(3,1,0))
}
plot3 <- function(power, bty = 'o') {
with(data, {
plot(x = power$dateTime,
y = power$Sub_metering_1,
type = 'l',
col = 'black',
xlab = '',
ylab = 'Energy sub metering')
lines(x = power$dateTime, y = power$Sub_metering_2, col = 'red')
lines(x = power$dateTime, y = power$Sub_metering_3, col = 'blue')
legend('topright',
col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'),
lty = c(1,1,1),
bty = bty)
})
}
plotVoltage <- function(power) {
plot(x = power$dateTime,
y = power$Voltage,
type = 'l',
xlab = 'datetime',
ylab = 'Voltage')
}
plotGlobalReactivePower <- function(power) {
plot(x = power$dateTime,
y = power$Global_reactive_power,
type = 'h',
xlab = 'datetime',
ylab = 'Global_reactive_power')
}
par(mfrow = c(2,2))
with(power, {
plot2(power)
plotVoltage(power)
plot3(power, bty = 'n')
plotGlobalReactivePower(power)
})
}
plot4(power)
plot4(power)
makePlot4 <- function(power, myFilename = 'plot4.png') {
plot4(power)
dev.copy(png, file = myFilename, width = 480, height = 480, units = "px")
dev.off()
}
makePlot4 <- function(power, myFilename = 'plot4.png') {
plot4(power)
dev.copy(png, file = myFilename, width = 480, height = 480, units = "px")
dev.off()
}
makePlot4(power)
(.52+.7)/(.52*.7+.25*.3)
(.52+.7)/((.52*.7)+(.25*.3))
(.52*.7)/(.52*.7+.25*.3)
(.75*.3)/(.75*.3+.48*.7)
qnorm(.95, mean = 1100, sd = 75/sqrt(100))
ppois(14, lambda = 15*100)
?ppois
ppois(10, lambda = 5*3)
pbinom(4, prob = .5, size = 5, lower.tail = FALSE)
pbinom(4, prob = .5, size = 5, lower.tail = TRUE)
pbinom(3, prob = .5, size = 5, lower.tail = FALSE)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
?goem
?geom
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
g <- ggplot(movies, aes(votes, rating))
g
print(g)
setwd("~/Documents/R/RepData_PeerAssessment1")
x <- read.csv("activity.csv")
colnames(x)
str(x)
x <- read.csv("activity.csv", colClasses = c("integer", "character", "integer"))
x
str(x)
x <- read.csv("activity.csv", colClasses = c("integer", "character", "integer"))
x$Date <- asPOSIXct(strptime(x$date, '%Y-%m-%d'))
x$Date <- as.POSIXct(strptime(x$date, '%Y-%m-%d'))
str(x)
hist(x$steps)
hist(x$steps, main = "Histogram of number of steps taken each day")
hist(x$steps, main = "Histogram of number of steps taken each day", xlab = "number of steps")
View(x)
?apply
x <- read.csv("activity.csv", colClasses = c("integer", "character", "integer"))
library(dplyr)
class(x)
str(x)
x$Date <- as.POSIXct(strptime(x$date, '%Y-%m-%d'))
str(x)
?select
y <- select(x, !is.na(steps))
?na.rm
mean(x$steps, na.rm = TRUE)
?mutate
?filter
View(x)
?summarize
summarize(group_by(x, Date), stepsDay = count(steps))
?group_by
y <- group_by(x, Date)
View(y)
summarize(y, n = sum(steps))
byDate <- summarize(y, n = sum(steps))
View(byDate)
byDate$n2[byDate$n == NA] <- 0
View(byDate)
byDate$n[byDate$n == NA] <- 0
View(byDate)
View(byDate)
byDate$n[byDate$n == "NA"] <- 0
View(byDate)
byDate$n2 <- byDaten
byDate$n2 <- byDate$n
View(byDate)
?mutate
byDate[is.na(d)] <- 0
byDate[is.na(n)] <- 0
byDate$n[is.na(byDate$n)] <- 0
View(byDate)
y <- group_by(x, Date)
summarize(y, n = sum(steps))
y$n[is.na(y$n)] <- 0
y <- group_by(x, Date)
y <- summarize(group_by(x, Date), n = sum(steps))
View(y)
y$n[is.na(y$n)] <- 0
View(y)
hist(y$n, main = "Histogram of number of steps taken each day", xlab = "number of steps")
meanTotal <- mean(y$n)
meanTotal
View(y)
class(y$Date)
?POSIXt
?weekdays
y$weekDay <- weeekdays(y$Date)
y$weekDay <- weekdays(y$Date)
View(y)
wE <- c("Saturday", "Sunday")
wD <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
y$weekDay2 <- y$weekDay
View(y)
y$weekDay2[wE] <- "weekend"
y$weekDay2[wE, ] <- "weekend"
y$weekDay2[y$weekDay2 == wE] <- "weekend"
y$weekDay2[c("Saturday", "Sunday")] <- "weekend"
class(y$weekDay)
y$weekDay2["Saturday"] <- "weekend"
y$weekDay2[[c("Saturday", "Sunday")] <- "weekend"
y$weekDay2[[c("Saturday", "Sunday")]] <- "weekend"
y$weekDay2[["Saturday"]] <- "weekend"
y$weekDay2[["Saturday"]]
y$weekDay2["Saturday"]
y[y$weekDay2 == "Saturday"] <- "weekend"
y[y$weekDay2 == "Saturday", ] <- "weekend"
y$weekDay3[y$weekDay2 == "Saturday", ] <- "weekend"
replace(y$WeekDay2, wE, "weekend")
View(y)
replace(y$WeekDay2, wD, "weekday")
View(y)
y$weekDay2 <- as.character(y$weekDay2)
replace(y$WeekDay2, wD, "weekday")
View(y)
wD
y$weekDay2[1, ]
y$weekDay2[1]
class(y$weekDay2[1])
replace(y$WeekDay2, wD, "weekday")
View(y)
replace(y$WeekDay2, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "weekday")
View(y)
replace(y$weekDay2, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "weekday")
View(y)
replace(y$weekDay2, wD, "weekday")
View(y)
indexWD <- y$weekDay2 == wD
indexWD <- y$weekDay2 == "Saturday"
replace(y$weekDay2, indexWD, "weekend")
View(y)
indexWE <- y$weekDay == "Saturday" | y$weekday == "Sunday"
y$weekDay2 <- replace(y$weekDay2, indexWE, "weekend")
View(y)
y$weekDay <- replace(y$weekDay, indexWE, "weekend")
View(y)
indexWE <- y$weekDay %in% wE
indexWE
y$weekday2 <- replace(y, weekDay %in% WE, "weekend")
y$weekday2 <- replace(y, y$weekDay %in% WE, "weekend")
y$weekday2 <- replace(y, y$weekDay %in% wE, "weekend")
y$weekday2 <- replace(y, y[weekDay %in% wE, ], "weekend")
y$weekday2 <- replace(y, y[y$weekDay %in% wE, ], "weekend")
y[y$weekDay %in% wE, ]
y$weekDay2[y$weekDay %in% wE, ] <- "weekend"
y[y == "Saturday"] <- "weekend"
y$weekDay2[y$weekDay2 == "Saturday"] <- "weekend"
View(y)
y$weekDay2[y$weekDay2 %in% wE] <- "weekend"
View(y)
y$weekDay2[y$weekDay2 %in% wD] <- "weekday"
View(y)
y$dayType <- y$weekDay
y$dayType[y$weekDay %in% wE] <- "weekend"
y$dayType[y$weekDay %in% wD] <- "weekday"
y$dayType <- y$weekDay
y$dayType[y$weekDay %in% c("Saturday", "Sunday")] <- "weekend"
y$dayType[y$weekDay %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")] <- "weekday"
View(y)
plot(y$Date, y$steps)
plot(y$Date, y$n)
plot(y$Date, y$steps, type = "l")
plot(y$Date, y$n, type = "l")
y_weekday <- filter(y, dayType == "weekday")
plot(y_weekday$Date, y_weekday$n, type = "l")
y_weekend <- filter(y, dayType == "weekend")
plot(y_weekend$Date, y_weekend$n, type = "l")
plot(y_weekend$Date, y_weekend$n, type = "l")
medianTotal <- median(y$n)
medianTotal
View(x)
m <- summarize(group_by(x, interval), v = mean(interval))
View(m)
m <- summarize(group_by(x, interval), v = mean(steps))
View(m)
m <- summarize(group_by(x, interval), v = mean(steps, na.rm = TRUE))
View(m)
plot(m$interval, m$v, type = "l")
m$interval[which.max(m$v)]
x_na <- x[is.na]
x_na <- is.na(x)
sum(x_na)
sum(is.na(x))
View(x)
sum(is.na(x$steps))
x2 <- x
x2$steps[is.na(x2$steps)] <- 0
View(`x2`)
hist(x2$steps, main = "Histogram of number of steps taken each day", xlab = "number of steps")
hist(x$steps, main = "Histogram of number of steps taken each day", xlab = "number of steps")
x <- read.csv("activity.csv", colClasses = c("integer", "character", "integer"))
x$newDate <- as.POSIXct(strptime(x$date, '%Y-%m-%d'))
meanSteps <- mean(x$steps, na.rm = TRUE)
medianSteps <- median(x$steps, na.rm = TRUE)
hist(x$steps, main = "Histogram of number of steps taken each day", xlab = "number of steps")
X2 <- summarize(group_by(x, interval), v = mean(steps, na.rm = TRUE))
x2 <- summarize(group_by(x, interval), v = mean(steps, na.rm = TRUE))
plot(x2$interval, x2$v, type = "l")
plot(x2$interval, x2$v, type = "l", main "Average Daily Activity Pattern",)
plot(x2$interval, x2$v, type = "l", main "Average Daily Activity Pattern")
plot(x2$interval, x2$v, type = "l", main = "Average Daily Activity Pattern")
plot(x2$interval, x2$v, type = "l", main = "Average Daily Activity Pattern", xlab = "5-minute interval", ylab = "average number of steps taken")
plot(x2$interval, x2$v, type = "l", main = "Average Daily Activity Pattern",
xlab = "5-minute interval",
ylab = "average number of steps taken")
maxInterval <- x2$interval[which.max(x2$v)]
sumNA <- sum(is.na(x))
View(x)
x$steps2[is.na(x$steps)] <- 0
View(x)
hist(x$steps2, main = "Histogram of number of steps taken each day", xlab = "number of steps")
str(x$steps2)
summary(x$steps2)
x$steps2 <- x$steps
x$steps2[is.na(x$steps)] <- 0
summary(x$steps2)
hist(x$steps2, main = "Histogram of number of steps taken each day", xlab = "number of steps")
meanSteps2 <- mean(x$steps2, na.rm = TRUE)
medianSteps2 <- median(x$steps2, na.rm = TRUE)
x$dayType <- x$newDate
View(x)
x$dayType[x$dayType %in% c("Saturday", "Sunday")] <- "weekend"
class(x$dayType)
x$dayType <- as.character(x$newDate)
View(x)
x$dayType <- x$newDate
x$dayType <- weekday(x$dayType)
x$dayType <- weekdays(x$dayType)
View(x)
y$dayType[y$weekDay %in% c("Saturday", "Sunday")] <- "weekend"
x$dayType[x$dayType %in% c("Saturday", "Sunday")] <- "weekend"
View(x)
x$dayType[x$dayType %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")] <- "weekday"
View(x)
x$dayType <- weekdays(x$Date)
x$dayType <- as.character(x$newDate)
x <- read.csv("activity.csv", colClasses = c("integer", "character", "integer"))
x$newDate <- as.POSIXct(strptime(x$date, '%Y-%m-%d'))
hist(x$steps, main = "Histogram of number of steps taken each day", xlab = "number of steps")
meanSteps <- mean(x$steps, na.rm = TRUE)
medianSteps <- median(x$steps, na.rm = TRUE)
library(dplyr)
x2 <- summarize(group_by(x, interval), v = mean(steps, na.rm = TRUE))
plot(x2$interval, x2$v, type = "l", main = "Average Daily Activity Pattern",
xlab = "5-minute interval",
ylab = "average number of steps taken")
maxInterval <- x2$interval[which.max(x2$v)]
